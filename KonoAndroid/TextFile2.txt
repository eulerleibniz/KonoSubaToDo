using Android.App;
using Android.Content;
using Android.Media;
using Android.OS;
using Android.Views;
using Android.Widget;
using System;
using System.Collections.Generic;
using System.Linq;

// TODO: remember to check for empty lists and expandable category and stuff

namespace KonoAndroid
{
    public class ExpandableListAdapter : BaseExpandableListAdapter
    {
        public ExpandableListAdapter(Activity context)
        {
            if (listGroupViewItem == null)
            {
                listGroupViewItem = new List<GroupViewItem>();
            }
            if (listChildViewItem == null)
            {
                listChildViewItem = new List<ChildViewItem>();
            }
            _context = context;
        }
        public void AddHeader(string text, bool isCheked)
        {
            if (listGroupViewItem == null)
            {
                listGroupViewItem = new List<GroupViewItem>();
            }
            GroupViewItem groupViewItem = new GroupViewItem(listGroupViewItem.Count)
            {
                TextView = new TextView(_context) { Text = text },
                CheckBox = new CheckBox(_context) { Checked = isCheked }
            };
            listGroupViewItem.Add(groupViewItem);
        }
        public void AddChild(string text, bool isCheked, int parentPosition)
        {
            if (listChildViewItem == null)
            {
                listChildViewItem = new List<ChildViewItem>();
            }
            ChildViewItem childViewItem = new ChildViewItem(parentPosition, listChildViewItem.Count(x => x.Position.Item1 == parentPosition))
            {
                TextView = new TextView(_context) { Text = text },
                CheckBox = new CheckBox(_context) { Checked = isCheked }
            };
            listChildViewItem.Add(childViewItem);
        }


        public class GroupViewItem: Java.Lang.Object
        {
            public GroupViewItem(int position)
            {
                Position = position;
            }
            public Guid Guid { get; } = Guid.NewGuid(); // C# 6 or higher

            public int Position { get; set; }
            public ImageView ImageView { get; set; }
            public TextView TextView { get; set; }
            public CheckBox CheckBox { get; set; }
        }

        public class ChildViewItem: Java.Lang.Object
        {
            public ChildViewItem(int groupPosition, int childPosition)
            {
                Position = (groupPosition, childPosition);
            }
            public Guid Guid { get; } = Guid.NewGuid(); // C# 6 or higher
            public (int, int) Position { get; set; }
            public ImageView ImageView { get; set; }
            public TextView TextView { get; set; }
            public CheckBox CheckBox { get; set; }
        }

        public List<GroupViewItem> listGroupViewItem { get; set; }
        public List<ChildViewItem> listChildViewItem { get; set; }

        private readonly Activity _context;

        public override Java.Lang.Object GetChild(int groupPosition, int childPosition)
        {
            // Find doesn't throw exeption when condition returns a Null List
            // instead it returns null on result
            // Using First we get an Exception when condition returns a Null List
            ChildViewItem childViewItem = listChildViewItem.Find(x => x.Position == (groupPosition, childPosition));
            if (childViewItem == null)
            {
                return null;
            }
            else
            {
                return childViewItem;
            }
        }

        public override long GetChildId(int groupPosition, int childPosition)
        {
            return childPosition;
        }

        public override View GetChildView(int groupPosition, int childPosition, bool isLastChild, View convertView, ViewGroup parent)
        {
            if (convertView == null)
            {
                convertView = _context.LayoutInflater.Inflate(Resource.Layout.custom_layout_list_item, null);
            }
            CheckBox checkBoxChild = (CheckBox)convertView.FindViewById(Resource.Id.ExpandableListView_Child_CheckBox);
            TextView textViewChild = (TextView)convertView.FindViewById(Resource.Id.ExpandableListView_Child_TextView);
            ImageView imageViewChild = (ImageView)convertView.FindViewById(Resource.Id.ExpandableListView_Child_ImageView);


            checkBoxChild.Checked = listChildViewItem[groupPosition].CheckBox.Checked;
            textViewChild.Text = listChildViewItem[groupPosition].TextView.Text;
            //imageViewChild.SetImageDrawable(listChildViewItem[groupPosition].ImageView.Drawable);

            listChildViewItem.Find(x => x.Position == (groupPosition, childPosition)).CheckBox = checkBoxChild;
            listChildViewItem.Find(x => x.Position == (groupPosition, childPosition)).TextView = textViewChild;
            listChildViewItem.Find(x => x.Position == (groupPosition, childPosition)).ImageView = imageViewChild;


            checkBoxChild.CheckedChange += CheckBoxChild_CheckedChange;

            return convertView;
        }

        public override int GetChildrenCount(int groupPosition)
        {
            return listChildViewItem.Count(x => x.Position.Item1 == groupPosition);
        }

        public override Java.Lang.Object GetGroup(int groupPosition)
        {
            // Find doesn't throw exeption when condition returns a Null List
            // instead it returns null on result
            // Using First we get an Exception when condition returns a Null List
            GroupViewItem groupViewItem = listGroupViewItem.Find(x => x.Position == groupPosition);
            if (groupViewItem == null)
            {
                return null;
            }
            else
            {
                return groupViewItem;
            }
        }

        public override int GroupCount
        {
            get
            {

                return listGroupViewItem.Count;
            }
        }

        public override long GetGroupId(int groupPosition)
        {
            return groupPosition;
        }

        public override View GetGroupView(int groupPosition, bool isExpanded, View convertView, ViewGroup parent)
        {
            if (convertView == null)
            {
                convertView = _context.LayoutInflater.Inflate(Resource.Layout.custom_layout_list_header, null);
            }
            CheckBox checkBoxGroup = (CheckBox)convertView.FindViewById(Resource.Id.ExpandableListView_Header_CheckBox);
            TextView textViewGroup = (TextView)convertView.FindViewById(Resource.Id.ExpandableListView_Header_TextView);
            ImageView imageViewGroup = (ImageView)convertView.FindViewById(Resource.Id.ExpandableListView_Header_ImageView);

            checkBoxGroup.Checked = listGroupViewItem[groupPosition].CheckBox.Checked;
            textViewGroup.Text = listGroupViewItem[groupPosition].TextView.Text;
            //imageViewGroup.SetImageDrawable(listGroupViewItem[groupPosition].ImageView.Drawable);

            listGroupViewItem[groupPosition].CheckBox = checkBoxGroup;
            listGroupViewItem[groupPosition].TextView = textViewGroup;
            listGroupViewItem[groupPosition].ImageView = imageViewGroup;

            return convertView;
        }

        public override bool HasStableIds
        {
            get
            {
                return false; // was default
                //return true;
            }
        }

        public override bool IsChildSelectable(int groupPosition, int childPosition)
        {
            return true;
        }

        public bool OnChildClick(ExpandableListView parent, View clickedView, int groupPosition, int childPosition, long id)
        {
            throw new NotImplementedException();
        }

        //public void OnCheckedChanged(CompoundButton buttonView, bool isChecked)
        //{
        //    System.Diagnostics.Debug.WriteLine("OnCheckedChanged");
        //}

        private void CheckBoxChild_CheckedChange(object sender, CompoundButton.CheckedChangeEventArgs e)
        {
            System.Diagnostics.Debug.WriteLine(sender.ToString());
            System.Diagnostics.Debug.WriteLine(e.ToString());
        }

    }
}